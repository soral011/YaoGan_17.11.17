#include "led_control.h"
#include <QDebug>
#include <QTimer>
#include <QMessageBox>
#include <QEventLoop>
#include <QSettings>
#include <QFile>
#include <QDir>
#include "windows.h"

led_control::led_control()
{
    wait_for_connect=false;
    m_filename=QDir::currentPath()+"/play.lst";
    connect(&tcpSocket,SIGNAL(connected()),this,SLOT(connect_success()));//接收连接成功信号
    connect(&tcpSocket,SIGNAL(error(QAbstractSocket::SocketError)),this,SLOT(connect_fail()));//接收连接失败信号
    connect(&tcpSocket,SIGNAL(readyRead()),this,SLOT(readyRead()));//收到服务器的反馈
}

bool led_control::connect_servers()
{
    wait_for_connect=false;
    tcpSocket.connectToHost(ip,port);
    while(wait_for_connect==false){
        QEventLoop ep;
        QTimer::singleShot(100,&ep, SLOT(quit()));
        ep.exec();
    }

    if(is_connected==true){
        return true;
    }else{
        return false;
    }
}

void led_control::setParm(QString ip_in, int port_in)
{
    ip=ip_in;
    port=port_in;
}

void led_control::connect_fail()
{
    wait_for_connect=true;
    is_connected=false;
    qDebug()<<"connect_fail()";
}

void led_control::connect_success()
{
    wait_for_connect=true;
    is_connected=true;
    qDebug()<<"connect_success()";
}

void led_control::set_playlst(struct show_result result)
{
    QFile file(m_filename);

    file.open(QFile::WriteOnly|QFile::Truncate);
    file.close();


    file.open(QFile::ReadWrite);



    QString front,str,position,data,tmp,action,item,end,color;

    tmp = "[playlist]\r\n";
    file.write(tmp.toLocal8Bit().data());
    action   = "500,1,0,";
    front    = "\\fs1616\\S00\\c255255000000";
    position = "\\C000000";
    end      = "\r";

    file.write("item_no = 3\r\n");

    //显示车牌号
    str = "";
    item = "item0=";
    str += item + action + front + "\\C032000" + "遥感监测";
    position = "\\C000024";

    str += position + result.car_license;
    position = "\\C000048";
    str += position + "检测结果:";
    if(result.isok == "合格"){
        color = GREEN;
    }else{
        color = RED;
    }
    tmp  = "\\C080048"+color;
    str += tmp + result.isok;
    str += end;

    file.write(str.toLocal8Bit().data());

    tmp = "item1=500,1,0,\\fs3232\\C000000\\S00\\c255255000000环保治理\\C000032利国利民" + end;
    file.write(tmp.toLocal8Bit().data());

//    tmp = "item2=500, 1, 0,\\fs3232\\C000000\\S00\\c255255000000浙大鸣泉\\C000032遥感检测";
//    file.write(tmp.toLocal8Bit().data());


    file.close();
}

void led_control::sendmsg()
{
    QFile file(m_filename);
    file.open(QFile::ReadOnly);
    QByteArray filedata=file.readAll();
    file.close();

//    QByteArray block;
//    QDataStream out(&block,QIODevice::WriteOnly);
    char data[2048]={0};

    data[0]=0x02;
    data[1]='0';
    data[2]='1';
    data[3]='0';

    memcpy(&data[4],&filedata,filedata.length());
    unsigned short crc=getCRC16((uchar*)data,filedata.length()+4);
    memcpy(&data[filedata.length()+4],&crc,2);
//    data[filedata.length()+4+2]=0x03;

    QByteArray send_data;
    send_data = QByteArray(data);

//    0x02 转换为 0x1B, 0xE7
//    0x03 转换为 0x1B, 0xE8
//    0x1B 转换为 0x1B, 0x00

    send_data.replace(0x02, QByteArray::fromHex("1BE7"));
    send_data.replace(0x03, QByteArray::fromHex("1BE8"));
    send_data.replace(0x1B, QByteArray::fromHex("1B00"));

    send_data.append(0x03);

    tcpSocket.write(data);
}

void led_control::readyRead()
{
    QDataStream in(&tcpSocket);
    QByteArray read;
    in>>read;
}

unsigned short led_control::getCRC16(uchar *ptr,  uchar len)
{
    uint index;
    uchar crch  =  0xFF;  //高CRC字节
    uchar crcl  =  0xFF;  //低CRC字节
    uchar TabH[]  =  {  //CRC高位字节值表
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
    };
    uchar TabL[]  =  {  //CRC低位字节值表
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
        0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
        0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
        0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
        0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
        0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
        0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
        0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
        0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
        0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
        0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
        0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
        0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
        0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
        0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
        0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
        0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
        0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
        0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
        0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
        0x43, 0x83, 0x41, 0x81, 0x80, 0x40
    };

    while(len--)  //计算指定长度的CRC
    {
        uchar value = (uchar)*ptr;
//        qDebug()<<"value = "<<value;
        ptr++;
        //index  =  crch ^ *ptr++;
        index  =  crch ^ value;
        crch  =  crcl ^ TabH[index];
        crcl  =  TabL[index];
    }

    return ((crch<<8) |  crcl);
}
